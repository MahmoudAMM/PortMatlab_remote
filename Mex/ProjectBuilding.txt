This is based on www.mathworks.com/help/matlab/matlab_external/compiling-mex-files-with-the-microsoft-visual-c-ide.html


To build MEX-files under Microsoft Visual Studio: (Windows only)
	This applies to the following compilers:
		Microsoft Visual C++
		Intel Fortran Compiler
	
	Create environment variable called "MATLABROOT" that points to Matlab installation directory. E.g. MATLABROOT=C:\Program Files\Polyspace\R2019b
	
	Create a project (shared library project, or dynamic link library project, or otherwise empty project)

	Project>Properties>General>Configuration Type>Dynamic Library (.dll)
	
	Project>Properties>Debugging>Command>
		Add matlabroot/bin/matlab.exe
	
	Add your MEX source files to the created project

	Project menu>Add New Item>Module-Definition File (.def)
		Specify the names of functions/subroutines exported from the dynamic library, for example:
			EXPORTS mexFunction        <-- for a C/C++ MEX-file
			or
			EXPORTS _MEXFUNCTION       <-- for a Fortran MEX-file (Alternatively you can add "!DEC$ ATTRIBUTES DLLEXPORT :: MEXFUNCTION" inside the MEXFUNCTION subroutine)

	Configure the compiler as follows (This assumes a C/C++ project. If it is a Fortran project, replace C/C++ with Fortran)
	  Project>Properties>C/C++>
		General>Additional Include Directories> add the following paths
			add matlabroot/extern/include
			add the directories with other headers you use (for example: Intel MKL or Armadiello)

		Preprocessor>Preprocessor Definition> add:
            MATLAB_MEX_FILE
		
		Fortran>Preprocessor>Preprocess Source File> Yes (/fpp)	(For Fortran projects only)

	Configure the Linker as follows
	  Project>Properties>Linker>
			General>Additional Library Directories>
				add matlabroot/extern/lib
				Add the directories with other libraries you use (for example: Intel MKL or Armadiello)

			Input>
				Additional Dependencies>
					add libmx.lib, libmex.lib, and libmat.lib
					Add any other libraries you use (for example: Intel MKL or Armadiello)

				Module Definition File> add the filename of the .def file you created


To build MEX-files under Eclipse IDE: (Windows and Linux)
	This applies to the following GCC compilers:
		gcc C compiler
		g++ C++ compiler
		gfortran Fortran Compiler

		In Eclipse, Fortran projects are buggy/less-mature/less-complete than C and C++ projects
		Pass the compiler option -cpp to enable preprocessing in Fortran source files [https://gcc.gnu.org/onlinedocs/gfortran/Preprocessing-Options.html]
		
	-lmx -lmex -lmat (libraries)
	
	Other compiler directives [matlabroot/bin/mexopts.sh]
	Specific directive for each compiler are in [matlabroot/bin/arch/mexopts/*.xml] This has not been updated here yet
		gcc C compiler
			-D_GNU_SOURCE
			-fexceptions
			-fPIC
			Release (optimization) -DNDEBUG

		g++ C++ compiler
			-D_GNU_SOURCE
			-fPIC
			Release (optimization) -DNDEBUG

		gfortran Fortran Compiler
			-fexceptions
			-fPIC
			Release (optimization) -DNDEBUG


Finally, after you successfully build a project and obtain the shared library (.dll on Windows or .so on Linux), change the library extension to .mexw32 (or .mexa32 on Linux) if you are building for a 32-bit PC or .mexw64 (or .mexa64) if you are building for a 64-bit PC.
